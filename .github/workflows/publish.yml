name: Publish Rust eBooks

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BOOKS: |
    - id: rust-book
      repo: https://github.com/rust-lang/book.git
      website: https://doc.rust-lang.org/stable/book
      title: The Rust Programming Language

    - id: rust-by-example
      repo: https://github.com/rust-lang/rust-by-example.git
      website: https://doc.rust-lang.org/rust-by-example
      title: Rust By Example

    - id: rust-reference
      repo: https://github.com/rust-lang/reference.git
      website: https://doc.rust-lang.org/reference
      title: The Rust Reference

    - id: rustonomicon
      repo: https://github.com/rust-lang/nomicon.git
      website: https://doc.rust-lang.org/nomicon
      title: The Rustonomicon

    - id: cargo-book
      repo: https://github.com/rust-lang/cargo.git
      website: https://doc.rust-lang.org/cargo
      title: The Cargo Book
      build_dir: cargo-book/src/doc

    - id: async-book
      repo: https://github.com/rust-lang/async-book.git
      website: https://rust-lang.github.io/async-book
      title: Asynchronous Programming in Rust

    - id: unsafe-code-guidelines
      repo: https://github.com/rust-lang/unsafe-code-guidelines.git
      website: https://rust-lang.github.io/unsafe-code-guidelines
      title: Rust Unsafe Code Guidelines
      build_dir: unsafe-code-guidelines/reference

    - id: rust-wasm-book
      repo: https://github.com/rustwasm/book.git
      website: https://rustwasm.github.io/book
      title: The Rust and WebAssembly Book

    - id: wasm-bindgen-book
      repo: https://github.com/rustwasm/wasm-bindgen.git
      website: https://rustwasm.github.io/wasm-bindgen
      title: The wasm-bindgen Guide
      build_dir: wasm-bindgen-book/guide

    - id: embedded-book
      repo: https://github.com/rust-embedded/book.git
      website: https://docs.rust-embedded.org/book
      title: The Embedded Rust Book

    - id: embedded-rtic
      repo: https://github.com/rtic-rs/rtic.git
      website: https://rtic.rs/1/book/en/
      title: Real-Time Interrupt-driven Concurrency (RTIC) Book
      build_dir: embedded-rtic/book/en

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo registry and binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y calibre git

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install mdBook (prebuilt)
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'

      - name: Install mdbook-epub (if needed)
        run: |
          if ! command -v mdbook-epub > /dev/null; then
            cargo install mdbook-epub
          fi

      - name: Build all books and generate eBooks
        run: |
          set -e
          mkdir -p site

          # Write the YAML from env to a file
          echo "${BOOKS}" > books.yaml

          # Convert YAML to JSON array
          books_json=$(yq -o=json '.' books.yaml)

          # Use mapfile to robustly loop over each book object
          mapfile -t book_array < <(echo "$books_json" | jq -c '.[]')

          cat README.md > mdbook/src/ABOUT.md

          # Generate bookshelf README.md for mdBook
          echo "Last updated: $(date -u +'%Y-%m-%d %H:%M:%S %Z')" >> mdbook/src/README.md

          for book_json in "${book_array[@]}"; do
            id=$(echo "$book_json" | jq -r .id)
            repo=$(echo "$book_json" | jq -r .repo)
            title=$(echo "$book_json" | jq -r .title)

            # Use build_dir if present, else default to id
            build_dir=$(echo "$book_json" | jq -r ".build_dir // .id")

            epub_out="${id}.epub"
            azw3_out="${id}.azw3"
            mobi_out="${id}.mobi"

            echo "Cloning $repo"
            git clone --depth 1 "$repo" "$id"

            last_commit_iso=$(git -C "$id" log -1 --format=%cI)
            last_commit_at=$(date -d "$last_commit_iso" '+%Y-%m-%d')

            # Remove badges that break mdbook-epub from all markdown
            find "$id" -type f -name '*.md' -exec sed -i \
            -e '/img\.shields\.io/d' \
            -e '/docs\.rs.*badge/d' \
            -e '/hackmd\.io.*badge/d' \
            -e '/badge\.svg/d' \
            {} +

            cd "$build_dir"
            mdbook-epub -s

            EPUB_FILE=$(find book/epub -name '*.epub' | head -n 1)
            if [ -z "$EPUB_FILE" ]; then
              echo "No EPUB generated for $id, skipping."
              cd -
              continue
            fi

            cp "$EPUB_FILE" "$OLDPWD/site/$epub_out"
            ebook-convert "$OLDPWD/site/$epub_out" "$OLDPWD/site/$azw3_out"
            ebook-convert "$OLDPWD/site/$epub_out" "$OLDPWD/site/$mobi_out"
            cd -

            # Add to bookshelf
            website=$(echo "$book_json" | jq -r .website)
            echo "1. $title · [EPUB]($epub_out) · [AZW3]($azw3_out) · [MOBI]($mobi_out) · [Online]($website) · [Repo]($repo) (commit: $last_commit_at)" >> mdbook/src/README.md
          done

      - name: Build mdBook site
        run: |
          cd mdbook
          mdbook build

      - name: Prepare site directory
        run: cp -r mdbook/book/* site/

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
