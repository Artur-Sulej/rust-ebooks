name: Build & Publish Rust Books eBooks

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BOOKS: |
    - id: rust-book
      repo: https://github.com/rust-lang/book.git
      epub_out: rust-book.epub
      azw3_out: rust-book.azw3
      title: The Rust Programming Language
    - id: rust-by-example
      repo: https://github.com/rust-lang/rust-by-example.git
      epub_out: rust-by-example.epub
      azw3_out: rust-by-example.azw3
      title: Rust By Example

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo registry and binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y calibre git

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install mdBook (prebuilt)
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'

      - name: Install mdbook-epub (if needed)
        run: |
          if ! command -v mdbook-epub > /dev/null; then
            cargo install mdbook-epub
          fi

      - name: Build all books and generate eBooks
        run: |
          mkdir -p site

          # Write the YAML from env to a file
          echo "${BOOKS}" > books.yaml

          # Convert YAML to JSON array
          books_json=$(yq -o=json '.' books.yaml)

          # Use mapfile to robustly loop over each book object
          mapfile -t book_array < <(echo "$books_json" | jq -c '.[]')

          for book_json in "${book_array[@]}"; do
            id=$(echo "$book_json" | jq -r .id)
            repo=$(echo "$book_json" | jq -r .repo)
            epub_out=$(echo "$book_json" | jq -r .epub_out)
            azw3_out=$(echo "$book_json" | jq -r .azw3_out)
            title=$(echo "$book_json" | jq -r .title)

            echo "Cloning $repo..."
            git clone --depth 1 "$repo" "$id"
            echo "[output.epub]" >> "$id/book.toml"
            cd "$id"
            mdbook build
            cd ..
            EPUB_FILE=$(find "$id/book/epub" -name '*.epub' | head -n 1)
            cp "$EPUB_FILE" site/"$epub_out"
            ebook-convert site/"$epub_out" site/"$azw3_out"
          done

          # Generate bookshelf README.md for mdBook
          cat > mdbook/src/README.md <<EOF
          # Rust Books Nightly eBooks

          Download the latest builds:
          EOF

          for book_json in "${book_array[@]}"; do
            epub_out=$(echo "$book_json" | jq -r .epub_out)
            azw3_out=$(echo "$book_json" | jq -r .azw3_out)
            title=$(echo "$book_json" | jq -r .title)
            echo "- [$title (EPUB)]($epub_out)" >> mdbook/src/README.md
            echo "- [$title (AZW3)]($azw3_out)" >> mdbook/src/README.md
          done

      - name: Build mdBook site
        run: |
          cd mdbook
          mdbook build

      - name: Prepare site directory
        run: cp -r mdbook/book/* site/

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
