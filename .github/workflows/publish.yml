name: Publish Rust eBooks

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BOOKS: |
    - id: rust-book
      repo: https://github.com/rust-lang/book.git
      website: https://doc.rust-lang.org/stable/book
      filename: rust-book
      title: The Rust Programming Language

    - id: rust-by-example
      repo: https://github.com/rust-lang/rust-by-example.git
      website: https://doc.rust-lang.org/rust-by-example
      filename: rust-by-example
      title: Rust By Example

    - id: rust-reference
      repo: https://github.com/rust-lang/reference.git
      website: https://doc.rust-lang.org/reference
      filename: rust-reference
      title: The Rust Reference

    - id: rustonomicon
      repo: https://github.com/rust-lang/nomicon.git
      website: https://doc.rust-lang.org/nomicon
      filename: rustonomicon
      title: The Rustonomicon

    - id: cargo-book
      repo: https://github.com/rust-lang/cargo.git
      website: https://doc.rust-lang.org/cargo
      filename: cargo-book
      title: The Cargo Book

    - id: edition-guide
      repo: https://github.com/rust-lang/edition-guide.git
      website: https://doc.rust-lang.org/edition-guide
      filename: edition-guide
      title: The Rust Edition Guide

    - id: async-book
      repo: https://github.com/rust-lang/async-book.git
      website: https://rust-lang.github.io/async-book
      filename: async-book
      title: Asynchronous Programming in Rust with async/await

    - id: rust-by-practice
      repo: https://github.com/sunface/rust-by-practice.git
      website: https://practice.rs
      filename: rust-by-practice
      title: Rust By Practice

    - id: unstable-book
      repo: https://github.com/rust-lang/unstable-book.git
      website: https://doc.rust-lang.org/unstable-book
      filename: unstable-book
      title: The Unstable Book

    - id: unsafe-code-guidelines
      repo: https://github.com/rust-lang/unsafe-code-guidelines.git
      website: https://rust-lang.github.io/unsafe-code-guidelines
      filename: unsafe-code-guidelines
      title: Rust Unsafe Code Guidelines

    - id: rust-wasm-book
      repo: https://github.com/rustwasm/book.git
      website: https://rustwasm.github.io/book
      filename: rust-wasm-book
      title: The Rust and WebAssembly Book

    - id: wasm-bindgen-book
      repo: https://github.com/rustwasm/wasm-bindgen.git
      website: https://rustwasm.github.io/wasm-bindgen
      filename: wasm-bindgen-book
      title: The wasm-bindgen Guide

    - id: embedded-book
      repo: https://github.com/rust-embedded/book.git
      website: https://docs.rust-embedded.org/book
      filename: embedded-book
      title: The Embedded Rust Book

    - id: embedded-discovery
      repo: https://github.com/rust-embedded/discovery.git
      website: https://docs.rust-embedded.org/discovery
      filename: embedded-discovery
      title: "Discovery: An Introduction to Embedded Systems Programming in Rust"

    - id: embedded-hal
      repo: https://github.com/rust-embedded/embedded-hal.git
      website: https://docs.rust-embedded.org/embedded-hal
      filename: embedded-hal
      title: The Embedded HAL Book

    - id: bare-metal-rust
      repo: https://github.com/andre-richter/bare-metal-rust.git
      website: https://andre-richter.github.io/bare-metal-rust
      filename: bare-metal-rust
      title: Bare Metal Rust

    - id: embedded-rtic
      repo: https://github.com/rtic-rs/book.git
      website: https://rtic.rs/1/book/en/
      filename: embedded-rtic
      title: Real-Time Interrupt-driven Concurrency (RTIC) Book

    - id: real-time-for-the-masses
      repo: https://github.com/ferrous-systems/real-time-for-the-masses.git
      website: https://ferrous-systems.github.io/real-time-for-the-masses
      filename: real-time-for-the-masses
      title: Real-Time for the Masses

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo registry and binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y calibre git

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install mdBook (prebuilt)
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'

      - name: Install mdbook-epub (if needed)
        run: |
          if ! command -v mdbook-epub > /dev/null; then
            cargo install mdbook-epub
          fi

      - name: Build all books and generate eBooks
        run: |
          mkdir -p site

          # Write the YAML from env to a file
          echo "${BOOKS}" > books.yaml

          # Convert YAML to JSON array
          books_json=$(yq -o=json '.' books.yaml)

          # Use mapfile to robustly loop over each book object
          mapfile -t book_array < <(echo "$books_json" | jq -c '.[]')

          # Generate bookshelf README.md for mdBook
          echo "# Rust ebooks – nightly builds" > mdbook/src/README.md
          echo "" >> mdbook/src/README.md
          echo "Last updated: $(date -u +'%Y-%m-%d %H:%M:%S %Z')" >> mdbook/src/README.md

          for book_json in "${book_array[@]}"; do
            id=$(echo "$book_json" | jq -r .id)
            repo=$(echo "$book_json" | jq -r .repo)
            filename=$(echo "$book_json" | jq -r .filename)
            title=$(echo "$book_json" | jq -r .title)

            epub_out="${filename}.epub"
            azw3_out="${filename}.azw3"
            mobi_out="${filename}.mobi"

            echo "Cloning $repo..."
            git clone --depth 1 "$repo" "$id"

            # Write minimal valid book.toml
            echo "[output.epub]" >> "$id/book.toml"

            cd "$id"
            mdbook build
            mdbook-epub -s .
            cd ..
            EPUB_FILE=$(find "$id/book/epub" -name '*.epub' | head -n 1)
            cp "$EPUB_FILE" site/"$epub_out"
            ebook-convert site/"$epub_out" site/"$azw3_out"
            ebook-convert site/"$epub_out" site/"$mobi_out"

            echo "1. $title – [EPUB](${filename}.epub) | [AZW3](${filename}.azw3) | [MOBI](${filename}.mobi) | [Repo](${repo})" >> mdbook/src/README.md
          done

      - name: Build mdBook site
        run: |
          cd mdbook
          mdbook build

      - name: Prepare site directory
        run: cp -r mdbook/book/* site/

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
